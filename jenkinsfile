pipeline {
    agent any
    
    environment{
        SCANNER_HOME= tool 'sonar-scanner'
        IMAGE_NAME = 'webapp-image'
        IMAGE_TAG = 'latest'
    }

    stages {
        stage('Git Checkout') {
            steps {
                git changelog: false, credentialsId: '8b607d58-38c7-45f6-95ec-d1f35e5e3e1a', poll: false, url: 'https://github.com/Rishi16122001/Demo-wepapi.git'
            }
        }
        
        stage('Restore packages'){
            steps{
                sh 'dotnet restore'
            }
        }
        
        stage('Build') {
            steps {
                sh 'dotnet build Demo-wepapi.csproj --configuration Release'
            }
        }
        
        stage('OWASP Scan') {
            steps {
                dependencyCheck additionalArguments: '--scan ./ ', odcInstallation: 'DP'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
        
        stage('Unit Testing') {
            steps {
                sh 'dotnet test Demo-wepapi.sln --logger "trx;LogFileName=./test-results.trx"'
            }
        }
        
        stage('Sonarqube Code Analysis') {
            steps {
                withSonarQubeEnv('sonar-server'){
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=demo-webAPI \
                    -Dsonar.java.binaries=. \
                    -Dsonar.projectKey=demo-webAPI '''
                }
            }
        }
        
        stage('Docker Build & Push') {
            steps {
                script{
                    withDockerRegistry(credentialsId: 'docker_login', toolName: 'docker') {
                        sh "docker build -t demo-webapp -f Dockerfile ."
                        sh "docker tag demo-webapp rishi16122001/${IMAGE_NAME}:${IMAGE_TAG}"
                        sh "docker push rishi16122001/${IMAGE_NAME}:${IMAGE_TAG}"
                    }
                }
            }
        }
        
        stage('Run Container') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker_login', toolName: 'docker'){
                        sh "docker run -d --name webappcontainer -p 8000:80 rishi16122001/${IMAGE_NAME}:${IMAGE_TAG}"
                    }
                }
            }
        }

    }
}
